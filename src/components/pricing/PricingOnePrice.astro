---
/**
 * * pricing section with toggle for hourly or monthly payments
 * This is designed for a single pricing option
 */
 import { Icon } from "astro-icon/components";

// components
import Button from "@components/button/Button.astro";
import Switch from "@components/starwind/switch";

interface PricingFeature {
	text: string;
	included: boolean;
}

interface PricingPlan {
	title?: string;
	description?: string;
	name?: string;
	hourlyPrice?: number;
	weeklyPrice?: number;
	planDescription?: string;
	features: PricingFeature[];
	ctaText?: string;
	ctaHref?: string;
}

const plan: PricingPlan = {
	title: "Transparent Pricing",
	description: "Let me help you achieve the success you deserve",
	name: "Performance",
	hourlyPrice: 60,
	weeklyPrice: 3000,
	planDescription: "Perfect for startups and small businesses",
	features: [
		{ text: "Data gathering, processing, and modeling", included: true },
		{ text: "Descriptive, predictive, and presciptive analytics", included: true },
		{ text: "Install, maintain, secure business applications and operating systems", included: true },
		{ text: "Build cool apps", included: true },
		{ text: "Two FREE consultations", included: true },
		{ text: "One MEMO report included", included: true },
	],
	ctaText: "Get Started",
	ctaHref: "https://buy.stripe.com/8wM03k5Na2bGfiEbIJ",
};

const {
	title,
	description,
	name,
	hourlyPrice,
	weeklyPrice,
	planDescription,
	features,
	ctaText,
	ctaHref,
} = plan;
---

<section
	id="pricing-one-price"
	class="bg-background dark text-foreground relative overflow-clip py-20 md:py-32 dark:border-y"
>
	<!-- Background Pattern -->
	<div class="absolute inset-0 scale-125 rotate-6" aria-hidden="true">
		<svg class="absolute h-full w-full opacity-5" xmlns="http://www.w3.org/2000/svg">
			<defs>
				<pattern id="pricing-one-price-grid" width="60" height="60" patternUnits="userSpaceOnUse">
					<path d="M 60 0 L 0 0 0 60" fill="none" stroke="currentColor" stroke-width="1.5"></path>
				</pattern>
			</defs>
			<rect width="100%" height="100%" fill="url(#pricing-one-price-grid)"></rect>
		</svg>
	</div>

	<div class="site-container relative">
		<div class="mx-auto mb-16 max-w-3xl text-center">
			<h2 class="h2 mb-4">{title}</h2>
			<p class="description text-xl">{description}</p>
		</div>

		<div class="mx-auto max-w-xl">
			<div class="group relative">
				<!-- Decorative gradient blur -->
				<div
					class="from-primary/50 to-primary-300/50 absolute -inset-px rounded-2xl bg-gradient-to-r opacity-30 blur-lg transition-all duration-500 group-hover:opacity-100"
				>
				</div>

				<div
					class="from-base-100 to-base-200 dark:from-base-900 dark:to-base-950/90 border-primary/20 hover:border-primary/40 relative rounded-2xl border bg-gradient-to-br p-8 backdrop-blur-sm transition-all duration-300 md:p-12"
				>
					<div class="mb-8 text-center">
						<h3 class="font-heading text-primary mb-2 text-3xl">{name}</h3>
						<p class="description text-base">{planDescription}</p>
					</div>

					<div class="mb-12 text-center">
						<div class="relative">
							<p class="pricing-hourly text-primary text-5xl font-bold md:text-7xl">
								${hourlyPrice}
								<span class="text-base-400 text-2xl font-normal">/hr</span>
							</p>
							<p class="pricing-weekly text-primary hidden text-5xl font-bold md:text-7xl">
								${weeklyPrice}
								<span class="text-base-400 text-2xl font-normal">/yr</span>
							</p>
						</div>
					</div>

					<ul class="mb-12 space-y-5">
						{
							features.map((feature) => (
								<li class="description flex items-center gap-4 rounded-lg">
									<span class:list={[feature.included ? "text-primary" : "text-base-500"]}>
										<Icon name={feature.included ? "tabler/check" : "tabler/x"} class="h-5 w-5" />
									</span>
									<span class:list={[feature.included ? "" : "opacity-70"]}>{feature.text}</span>
								</li>
							))
						}
					</ul>

					<Button
						variant="primary"
						href="https://buy.stripe.com/8wM03k5Na2bGfiEbIJ"
						class="w-full text-lg"
					>
						{ctaText}
					</Button>
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	const setupPricingToggle = () => {
		const pricingSection = document.getElementById("pricing-one-price");
		const toggle = pricingSection?.querySelector("#pricing-one-price__toggle");
		const hourlyPrices = pricingSection?.querySelectorAll(".pricing-hourly");
		const weeklyPrices = pricingSection?.querySelectorAll(".pricing-weekly");

		if (!toggle || !hourlyPrices || !weeklyPrices) return;

		// Create a new MutationObserver to watch for aria-checked changes
		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				if (mutation.type === "attributes" && mutation.attributeName === "aria-checked") {
					const isweekly = toggle.getAttribute("aria-checked") === "true";
					hourlyPrices.forEach((price) => price.classList.toggle("hidden", isweekly));
					weeklyPrices.forEach((price) => price.classList.toggle("hidden", !isweekly));
				}
			});
		});

		// Start observing the toggle button for attribute changes
		observer.observe(toggle, {
			attributes: true,
			attributeFilter: ["aria-checked"], // only watch for aria-checked changes
		});
	};

	setupPricingToggle();

	document.addEventListener("astro:after-swap", () => {
		setupPricingToggle();
	});
</script>